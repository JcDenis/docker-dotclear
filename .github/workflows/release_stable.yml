name: Build and push stable image

on:
  schedule:
  - cron: '0 10 * * *'
  workflow_dispatch:
    inputs:
      rebuild:
        description: 'rebuild'
        type: boolean
        required: true

env:
  DOTCLEAR_IMAGE: docker-dotclear
  DOTCLEAR_CANAL: stable
  DOTCLEAR_URL: https://download.dotclear.org/versions.xml
  DOCKER_NAMESPACE: jcpd

jobs:
  check_release:
    name: Check and compare official Dotclear version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.dotclear.outputs.version }}
      exists: ${{ steps.repository.outputs.release-exists }}
    steps:
      - name: Install required packages
        run: curl -sSL https://bit.ly/install-xq | sudo bash

      - name: Download and parse last version
        id: dotclear
        run: |
          curl -fsSL -o versions.xml ${{ env.DOTCLEAR_URL }}
          echo version=$(cat versions.xml | xq -x "//release[@name='${{ env.DOTCLEAR_CANAL }}']/@version") >> $GITHUB_OUTPUT

      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check repository releases
        id: repository
        uses: insightsengineering/release-existence-action@v1.0.0
        with:
          release-tag: ${{ steps.dotclear.outputs.version }}

  do_release:
    name: Create repository release according to Dotclear version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: check_release
    if: needs.check_release.outputs.exists == 'false'
    steps:
      - name: Create repository release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check_release.outputs.version }}
          name: ${{ needs.check_release.outputs.version }}
          draft: false
          prerelease: false

  do_image:
    name: Build and push latest and versionned images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    needs: check_release
    if: (needs.check_release.outputs.exists == 'false') || (github.event.inputs.rebuild == 'true')
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Log in to Github registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case github repository
        run: |
          echo "GITHUB_REPOSITORY=${REPO,,}" >>${GITHUB_ENV}
        env:
          REPO: '${{ github.repository }}'

      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: .
          sbom: true
          push: true
          tags: |
            ${{ env.DOCKER_NAMESPACE }}/${{ env.DOTCLEAR_IMAGE }}:${{ needs.check_release.outputs.version }}
            ${{ env.DOCKER_NAMESPACE }}/${{ env.DOTCLEAR_IMAGE }}:latest
            ghcr.io/${{ env.GITHUB_REPOSITORY }}:${{ needs.check_release.outputs.version }}
            ghcr.io/${{ env.GITHUB_REPOSITORY }}:latest
          build-args: CANAL=${{ env.DOTCLEAR_CANAL }}
          platforms: linux/386,linux/amd64,linux/arm64,linux/arm/V7
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Send Telegram Message Ok
        uses: appleboy/telegram-action@master
        env:
          GITHUB_CONTEXT: ${{toJSON(github)}}
        with:
          to: ${{ secrets.TELEGRAM_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: Images __${{ env.DOTCLEAR_IMAGE }}:latest__ and  __${{ env.DOTCLEAR_IMAGE }}:${{ needs.check_release.outputs.version }}__ successfully generated.
